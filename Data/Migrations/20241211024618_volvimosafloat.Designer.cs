// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(CurrencyContext))]
    [Migration("20241211024618_volvimosafloat")]
    partial class volvimosafloat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Data.Entities.Convertions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<float>("ConvertedAmount")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("FromCurrencyCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ToCurrencyCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("FromCurrencyCode");

                    b.HasIndex("ToCurrencyCode");

                    b.HasIndex("UserId");

                    b.ToTable("Convertions");
                });

            modelBuilder.Entity("Data.Entities.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<float>("ConvertionIndex")
                        .HasColumnType("REAL");

                    b.Property<string>("Legend")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Code = "USD",
                            ConvertionIndex = 1f,
                            Legend = "UnitedStatesDollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Code = "EUR",
                            ConvertionIndex = 1.09f,
                            Legend = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            Code = "CLP",
                            ConvertionIndex = 0.001f,
                            Legend = "ChileanPeso",
                            Symbol = "$"
                        });
                });

            modelBuilder.Entity("Data.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxConversions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxConversions = 10,
                            SubscriptionType = 0
                        },
                        new
                        {
                            Id = 2,
                            MaxConversions = 100,
                            SubscriptionType = 1
                        },
                        new
                        {
                            Id = 3,
                            MaxConversions = 2147483647,
                            SubscriptionType = 2
                        });
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("confirmPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("conversions")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "user@gmail.com",
                            Password = "password1",
                            Role = 0,
                            SubscriptionId = 1,
                            Username = "user1",
                            confirmPassword = "password1",
                            conversions = 0
                        },
                        new
                        {
                            Id = 2,
                            Email = "user2@example.com",
                            Password = "password2",
                            Role = 0,
                            SubscriptionId = 2,
                            Username = "user2",
                            confirmPassword = "password2",
                            conversions = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "user3@example.com",
                            Password = "password3",
                            Role = 1,
                            SubscriptionId = 3,
                            Username = "user3",
                            confirmPassword = "password3",
                            conversions = 0
                        });
                });

            modelBuilder.Entity("Data.Entities.Convertions", b =>
                {
                    b.HasOne("Data.Entities.Currency", "FromCurrency")
                        .WithMany()
                        .HasForeignKey("FromCurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Currency", "ToCurrency")
                        .WithMany()
                        .HasForeignKey("ToCurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromCurrency");

                    b.Navigation("ToCurrency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.HasOne("Data.Entities.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });
#pragma warning restore 612, 618
        }
    }
}
